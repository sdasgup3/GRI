define("NUM_VERTICES", "10"); // In one layer
define("NOTVISITED", "0");
define("VISITED", "1");

// Recursive depth first search
function dfs(v, dfsorder)
{
  if(v.visit == VISITED)
    return;

  println("Closing vertex: " + v.num);
  v.visit = VISITED;

  dfsorder.pushBack(v);

  foreach(neighbor; v.getNeighbors())
    dfs(neighbor, dfsorder);

}

// Generate testing graph and run DFS
function main(argv)
{
//  o 0----- o 1----- o 2----- ...o 9
//  |       |       |
//  |       |       |
//  o 10      o 11      o

  g = graph();
  v1 = g.generateVertex();
  v1.num = 0;
  first = v1;

  // Generate first layer
  for(i = 1; i < NUM_VERTICES; i++)
  {
    v2 = g.generateVertex();
    v2.num = i;

    g.generateEdge(v1, v2);
    v1 = v2;
  }

  // Generate second layer
  foreach(v1; g.getVertices())
  {
    v2 = g.generateVertex();
    v2.num = i++;
    g.generateEdge(v1, v2);
  }

  // Initialize visits
  foreach(v; g.getVertices())
    v.visit = NOTVISITED;

  // Run (any vertex first)
  dfsorder =  array(0);
  dfs(first, dfsorder);

  foreach(vertex; dfsorder) {
    println(" " + vertex.num + " ");
  }
}
