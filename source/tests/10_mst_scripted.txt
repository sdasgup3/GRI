function displayAdjacencyMatrix(matrix, vertices)
{
  print("   ");
  foreach(vertex; vertices.iterator()) {
    print("" + vertex.__id + " ");
  }

    println("");
  it = vertices.iterator();
  foreach(line; matrix.iterator()) {
    if(it.hasNext())
      vertex = it.next();

    print("" + vertex.__id + " |");
        
    foreach(item; line.iterator())  {
      print("" + item + " ");
    }

    println("");
  }
}

function mst_helper(g)
{
  vertices = g.getVertices();
  numvertices = g.getNumVertices();
  edges = g.getEdges();
  numedges = g.getNumEdges();

  //Init dist matrix
  matrix  = array(numvertices);
  for(i = 0; i < numvertices; i++) {
    matrix[i] = array(numvertices);
    for(j = 0 ; j < numvertices; j++) {
      matrix[i][j] = 0.0;
    }
  }

  foreach(edge; edges.iterator()) {
    begin = edge.getBeginVertex();
    end = edge.getEndVertex();
    wt = edge.__w;

    matrix[begin.__id][end.__id] = wt;
    matrix[end.__id][begin.__id] = wt;
  }

  displayAdjacencyMatrix(matrix, vertices);

  pathNdist = mst(matrix, numvertices);
  println("");

  parent = pathNdist[0];
  dst = pathNdist[1];

  for(i = 0 ; i < numvertices ; i++) {
    print("" + i + " : " + dst[i] + " " + i + "--" + parent[i]);
    println("");
  }
}

function mst(graph, V)
{
  dist = array(V);
  for(i = 0 ; i < V; i++) {
    dist[i] = 9999.9999;
  }

  parent = array(V);
  for(i = 0 ; i < V; i++) {
    parent[i] = -1;
  }

  visited = array(V);
  for(i = 0 ; i < V; i++) {
    visited[i] = false;
  }

  dist[0] = 0.0;
  parent[0] = 0;
  

  for(count = 0 ; count < V; count ++) {
    //Find min distance
    min = 999.999;
    index = -1;

    for(i = 0 ; i < V; i++) {
      if(dist[i] < min && false == visited[i]) {
        min = dist[i];
        index = i;
      }
    }

    if(-1 == index) {
      break;
    }
    //Finalize the current visited node
    visited[index] = true;

    //upate the ngbrs
    for(i = 0 ; i < V; i++) {
      if(i == index || 0.0 == graph[index][i]   
            || true == visited[i]) {
        continue;
      }

      if(graph[index][i] < dist[i]) {
        dist[i] = graph[index][i];
        parent[i] = index;
      }
    }
  }

  ret  = array(2);
  ret[0] = parent;
  ret[1] = dist;

  return ret;
}


function main(argv) 
{
  g = graph();
  g.loadFromFile("graphs/simple_mst.txt");
  //g.loadFromFile("graphs/02_graph_5_5_5.txt");
  //g.loadFromFile(argv[0]);

  vertices = g.getVertices();

  //matrix = g.getAdjacencyMatrix();

  //displayAdjacencyMatrix(matrix, vertices);


  mst_helper(g);
  
}



