function displayAdjacencyMatrix(matrix, vertices)
{
  print("   ");
  foreach(vertex; vertices.iterator()) {
    print("" + vertex.__id + " ");
  }

    println("");
  it = vertices.iterator();
  foreach(line; matrix.iterator()) {
    if(it.hasNext())
      vertex = it.next();

    print("" + vertex.__id + " |");
        
    foreach(item; line.iterator())  {
      print("" + item + " ");
    }

    println("");
  }
}

function displaySTP(pathNdist, start, end, numvertices)
{

  parent = pathNdist[0];
  dist = pathNdist[1];

  //println("Print distance / path");

  if(-1 != end) {
    path = getPath(parent, start, end);

    print("" + end + " | " + dist[end] + " | ");
    for(i = 0 ; i < path.size(); i++) {
      print("" + path[i] + " ");
    }
    println("");

  } else {
    for(i = 0 ; i < numvertices ; i++) {
      end = i;
      //path = getPath(parent, start, end);

      print("" + end + " | " + dist[i] + " | " + parent[i]);
      //for(j = 0 ; j < path.size() -1; j++) {
     //   print("" + path[j] + " ");
     // }
      println("");
    }
  }
}



function getPath(parent, start, end)
{
  path = array(1);
  runner = end;
  while(runner != start) {
    path.pushFront(runner);
    runner = parent[runner];
  }
  path.pushFront(start);

  return path;
}

function main(argv) 
{
  g = graph();
  //g.loadFromFile("graphs/simple_shortestpath.txt");
  g.loadFromFile(argv[0]);
  //g.loadFromFile("graphs/02_graph_5_5_5.txt");

  vertices = g.getVertices();
  it = vertices.iterator();
  start = it.next();
  //it.next();
  //it.next();
  //it.next();
  //end = it.next();

  //matrix = g.getAdjacencyMatrix();
  //displayAdjacencyMatrix(matrix, vertices);


  pathNdist = g.getShortestPath("__w", start, NULL);
  displaySTP(pathNdist, start.__id, -1, g.getNumVertices());

  //pathNdist = g.getShortestPath("__w", start, end);
  //displaySTP(pathNdist, start.__id, end.__id, g.getNumVertices());

}



